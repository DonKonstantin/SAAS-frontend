stages:
  - build
  - deploy
  - cleanup

### Сборка тега
Build:
  stage: build
  script:
    - type multiwerf && . $(multiwerf use 1.1 stable --as-file)
    - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
    - werf build-and-publish --stages-storage :local

### Базовый скрипт деплоя на площадку
.base_deploy: &base_deploy
  stage: deploy
  script:
    - cat $REGISTRY_CREDENTIALS >> .helm/values.yaml && printf "\n" >> .helm/values.yaml
    - printf "%s\n" "$NODE_SELECTOR" >> .helm/values.yaml
    - printf "%s" "$CLUSTER_CONFIG" > /tmp/.kube.config-$CI_JOB_ID
    - cat /tmp/.kube.config-$CI_JOB_ID
    - kubectl config --kubeconfig=/tmp/.kube.config-$CI_JOB_ID use-context $CLUSTER_CONTEXT
    - type multiwerf && . $(multiwerf use 1.1 stable --as-file)
    - type werf && source <(werf ci-env gitlab --tagging-strategy tag-or-branch --verbose)
    - werf deploy --stages-storage :local
      --kube-config=/tmp/.kube.config-$CI_JOB_ID
      --kube-context="$CLUSTER_CONTEXT"
      --set-string "env.GRAPHQL_SERVER=$(echo ${GRAPHQL_SERVER})"
      --set-string "env.SSR_GRAPHQL_SERVER=$(echo ${SSR_GRAPHQL_SERVER})"
      --set-string "env.DOMAIN=$(echo ${DOMAIN})"
      --set-string "env.TRANSLATION_MAX_QUERIES_PER_TIME=$(echo ${TRANSLATION_MAX_QUERIES_PER_TIME})"
      --set-string "env.GRAPHQL_WS_SERVER=$(echo ${GRAPHQL_WS_SERVER})"
      --set-string "env.SSR_GRAPHQL_WS_SERVER=$(echo ${SSR_GRAPHQL_WS_SERVER})"
      --set-string "env.FILE_CONVERTATION_CSV_ENDPOINT=$(echo ${FILE_CONVERTATION_CSV_ENDPOINT})"
      --set-string "env.FILE_CONVERTATION_XLSX_ENDPOINT=$(echo ${FILE_CONVERTATION_XLSX_ENDPOINT})"
      --set-string "env.FILE_UPLOADING_ENDPOINT=$(echo ${FILE_UPLOADING_ENDPOINT})"
      --set-string "env.FILE_VIEW_ENDPOINT=$(echo ${FILE_VIEW_ENDPOINT})"
      --set-string "env.EXCEL_FILE_WS_ENDPOINT=$(echo ${EXCEL_FILE_WS_ENDPOINT})"
  dependencies:
    - Build

Cleanup:
  stage: cleanup
  script:
    - type multiwerf && . $(multiwerf use 1.1 stable --as-file)
    - type werf && source $(werf ci-env gitlab --as-file)
    - docker login -u nobody -p ${WERF_IMAGES_CLEANUP_PASSWORD} ${WERF_REPO}
    - werf cleanup
      --stages-storage :local
      --git-history-based-cleanup-v1.2
  only: [schedules]

## Это деплой ветки на продакшен. Его в последствии можно заменить на деплой в staging
#Deploy branch to Production:
#  <<: *base_deploy
#  stage: deploy
#  only:
#    refs:
#      - master
#      - /^test.*/
#      - /^dev.*/
#      - /^release.*/
#      - /^feature.*/
#  when: manual
#  environment:
#    name: Production
#  variables:
#    # Переменные кластеры
#    CLUSTER_CONFIG: $PRODUCTION_KUBECONFIG
#    CLUSTER_CONTEXT: $PRODUCTION_KUBE_CONTEXT

# Деплой релиза в Production
Deploy release to Production:
  <<: *base_deploy
  stage: deploy
  only:
    - tags
  when: manual
  environment:
    name: Production
  variables:
    # Переменные кластеры
    CLUSTER_CONFIG: $PRODUCTION_KUBECONFIG
    CLUSTER_CONTEXT: $PRODUCTION_KUBE_CONTEXT
